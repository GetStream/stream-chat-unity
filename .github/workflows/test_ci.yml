name: Run Unity tests on Mac OS

on: workflow_dispatch

env:
  UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}

jobs:
  testRunner:
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest]
        unity_version: [2021.3.0, 2020.3.0]
        dotnet_version: [NET_4_x, STANDARD_2_x]
        compiler: [mono, il2cpp]
        target_platform: [standalone]
    name: Execute editor tests
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        
      - name: Print chipset
        shell: bash
        run: uname -m
        continue-on-error: true      

      - name: Set up Node.js 14
        uses: actions/setup-node@v1
        with:
          node-version: 14

      - name: Install node package, `unity-license-activate`
        run: npm install --global https://github.com/sierpinskid/unity-license-activate
        
#      - name: Install node package, `unity-verify-code`
#        run: npm install --global unity-verify-code
        
      - name: Install node package, `unity-verify-code`
        run: npm install --global https://github.com/sierpinskid/unity-verify-code
       
#      - name: Install Gdown
#        shell: bash
#        run: |
#          sudo pip3 install gdown
        
#      - name: Download license file
#        shell: bash
#        run: |
#          cd ~
#          gdown ${{ secrets.UNITY_LICENSE_GDRIVE_FILE_ID }}
        
#      - name: Generate lincense file
#        shell: bash
#        run: echo "${{ env.UNITY_LICENSE }}" > ~/unity_license.ulf
        
      - name: Download Unity & Modules
        if: ${{ matrix.os }} == 'macos-latest'
        shell: bash
        run: |
          if [[ ${{ matrix.unity_version }} ==  '2021.3.0' ]]
          then
            curl -L -o ~/Unity.pkg https://download.unity3d.com/download_unity/6eacc8284459/MacEditorInstaller/Unity.pkg

            if [[ ${{ matrix.compiler }} == 'il2cpp' ]]
            then
              curl -L -o ~/UnityIL2CPPModule.pkg https://download.unity3d.com/download_unity/6eacc8284459/MacEditorTargetInstaller/UnitySetup-Mac-IL2CPP-Support-for-Editor-2021.3.0f1.pkg
            fi

            if [[ ${{ matrix.target_platform }} == 'mobile' ]]
            then
              curl -L -o ~/UnityIosModule.pkg https://download.unity3d.com/download_unity/6eacc8284459/MacEditorTargetInstaller/UnitySetup-iOS-Support-for-Editor-2021.3.0f1.pkg
            fi
          elif [[ ${{ matrix.unity_version }} ==  '2020.3.0' ]]
          then
            curl -L -o ~/Unity.pkg https://download.unity3d.com/download_unity/1fb1bf06830e/MacEditorInstaller/Unity.pkg

            if [[ ${{ matrix.compiler }} == 'il2cpp' ]]
            then
              curl -L -o ~/UnityIL2CPPModule.pkg  https://download.unity3d.com/download_unity/1fb1bf06830e/MacEditorTargetInstaller/UnitySetup-iOS-Support-for-Editor-2020.3.30f1.pkg
            fi

            if [[ ${{ matrix.target_platform }} == 'mobile' ]]
            then
              curl -L -o ~/UnityIosModule.pkg https://download.unity3d.com/download_unity/1fb1bf06830e/MacEditorTargetInstaller/UnitySetup-Mac-IL2CPP-Support-for-Editor-2020.3.30f1.pkg
            fi
          fi
          
      - name: Print home dir
        shell: bash
        run: ls ~
        continue-on-error: true

      - name: Install Unity & Modules
        shell: bash
        run: |
          sudo installer -package ~/Unity.pkg -target /

          if [[ ${{ matrix.compiler }} == 'il2cpp' ]]
          then
            sudo installer -package ~/UnityIL2CPPModule.pkg -target /
          fi

          if [[ ${{ matrix.target_platform }} == 'mobile' ]]
          then
            sudo installer -package ~/UnityIosModule.pkg -target /
          fi
          
      - name: Print ls
        if: always()
        shell: bash
        run: ls

      - name: Create Test Results dir
        shell: bash
        run: mkdir test_results

#      - name: Activate Unity
#        uses: kuler90/activate-unity@v1
#        with:
#          unity-username: ${{ secrets.UNITY_ACCOUNT_USER }}
#          unity-password: ${{ secrets.UNITY_ACCOUNT_PASS }}
#          unity-authenticator-key: ${{ secrets.UNITY_AUTHENTICATOR_KEY }}
#          unity-serial: "${{ secrets.UNITY_ACCOUNT_SERIAL }}"
#          unity-path: "/Applications/Unity/Unity.app/Contents/MacOS/Unity"

#      - name: Activate Unity with User/Pass/Serial 
#        shell: bash
#        run: sudo /Applications/Unity/Unity.app/Contents/MacOS/Unity -batchmode -nographics -serial "${{ secrets.UNITY_ACCOUNT_SERIAL }}" -username "${{ secrets.UNITY_ACCOUNT_USER }}" -password "${{ secrets.UNITY_ACCOUNT_PASS }}" -quit
        
      - name: Generate license file
        shell: bash
        run: sudo /Applications/Unity/Unity.app/Contents/MacOS/Unity -batchmode -nographics -createManualActivationFile -quit
        continue-on-error: true #Unity return exit code 1 even if successfully creating license file
        
      - name: List dir
        shell: bash
        run: |
          ls
          grep ".alf$"
          ULF_FILE_PATH=$(ls | grep ".alf$")
          echo $ULF_FILE_PATH
        continue-on-error: true 
        
      - name: Ensure code file exists
        shell: bash
        run: touch ./code.txt
        continue-on-error: true
        
      - name: Activate license file (generate ULF from ALF)
        shell: bash
        run: sudo unity-license-activate "${{ secrets.UNITY_ACCOUNT_USER }}" "${{ secrets.UNITY_ACCOUNT_PASS }}" "$(ls | grep ".alf$")" --password "${{ secrets.EMAIL_PASS }}" --host "imap.gmail.com"
        continue-on-error: true
        
      - name: Print code file
        shell: bash
        run: cat ./code.txt
        continue-on-error: true
        
      - name: ðŸ©º Upload error screenshot
        uses: actions/upload-artifact@v1
        continue-on-error: true
        with:
          name: screenshot_error
          path: error.png
        
      - name: List dir
        shell: bash
        run: ls
        
      - name: Get ulf file
        shell: bash
        run: ls | grep ".ulf$"
        
#      - name: Activate the license - Generate ULF file
#        run: unity-license-activate "${{ secrets.UNITY_EMAIL }}" "${{ secrets.UNITY_PASSWORD }}" $ULF_FILE_PATH
        
      - name: Activate Unity with license file
        shell: bash
        run: sudo /Applications/Unity/Unity.app/Contents/MacOS/Unity -batchmode -nographics -manualLicenseFile "$(ls | grep ".ulf$")" -quit
        continue-on-error: true #Unity return exit code 1 even if successfully activating with license file
        
      - name: LS Unity Logs dir
        shell: bash
        run: ls ~/Library/Logs/Unity/
        continue-on-error: true
        
      - name: Print Audit Unity Logs
        shell: bash
        run: cat ~/Library/Logs/Unity/Unity.Entitlements.Audit.log
        continue-on-error: true
        
      - name: Print Client Unity Logs
        shell: bash
        run: cat ~/Library/Logs/Unity/Unity.Licensing.Client.log
        continue-on-error: true
        
      - name: Print Unity Editor Logs
        shell: bash
        run: cat ~/Library/Logs/Unity/Editor.log
        continue-on-error: true

      - name: Enable Stream Tests in Unity
        shell: bash
        run: sudo /Applications/Unity/Unity.app/Contents/MacOS/Unity -batchmode -nographics -projectPath "$GITHUB_WORKSPACE" -executeMethod StreamChat.EditorTools.StreamEditorTools.EnableStreamTestsEnabledCompilerFlag -quit
        
#skip -quit due to not working with async tests
      - name: Run Unity Tests
        shell: bash
        run: sudo /Applications/Unity/Unity.app/Contents/MacOS/Unity -batchmode -nographics -projectPath "$GITHUB_WORKSPACE" -runTests -testResults ~/test_results/results.xml -streamBase64TestDataSet ${{ secrets.STREAM_AUTH_TEST_DATA_BASE64 }}
        
#due to skipped -quit
      - name: Force Close Unity
        shell: bash
        run: sudo pkill -x Unity
        continue-on-error: true
        
      - name: Print Test Results
        if: always()
        shell: bash
        run: cat ~/test_results/results.xml
        
      - name: Print Unity Logs
        shell: bash
        run: cat ~/Library/Logs/Unity/Editor.log
        continue-on-error: true
        
      - name: Build Sample App
        shell: bash
        run: sudo /Applications/Unity/Unity.app/Contents/MacOS/Unity -batchmode -nographics -projectPath "$GITHUB_WORKSPACE" -executeMethod "StreamChat.EditorTools.StreamEditorTools.BuildSampleApp" -streamBase64TestDataSet ${{ secrets.STREAM_AUTH_TEST_DATA_BASE64 }} -apiCompatibility ${{ matrix.dotnet_version }} -scriptingBackend ${{ matrix.compiler }} -buildTargetPlatform ${{ matrix.target_platform }} -buildTargetPath "~/SampleAppBuild/App" -quit
        
#      - name: Return Unity license
#        if: always()
#        shell: bash
#        run: sudo /Applications/Unity/Unity.app/Contents/MacOS/Unity -batchmode -nographics -returnlicense -username "${{ secrets.UNITY_ACCOUNT_USER }}" -password "${{ secrets.UNITY_ACCOUNT_PASS }}" -quit
       
